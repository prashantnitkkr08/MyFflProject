package com.restCalls.main;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.ExecuteException;

public class CallLogic {
	static int iExitValue;
    static String sCommandString;
	public static void shellScriptExecution(String command) 
	{
        sCommandString = command;
        CommandLine oCmdLine = CommandLine.parse(sCommandString);
        DefaultExecutor oDefaultExecutor = new DefaultExecutor();
        oDefaultExecutor.setExitValue(0);
        try {
            iExitValue = oDefaultExecutor.execute(oCmdLine);
        } catch (ExecuteException e) {
            System.err.println("Execution failed.");
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("permission denied.");
            e.printStackTrace();
        }
    }
	
	public static void batFileExecution() throws IOException, InterruptedException 
	{
		ProcessBuilder pb = new ProcessBuilder("cmd", "/c", "batchTest.bat");
		File dir = new File("C:/Users/Prashant Chaudhary/Desktop");
		pb.directory(dir);
		Process p = pb.start();
		p.waitFor();
	}
	
	public static void executionThroughTerminal() throws IOException, InterruptedException 
	{
		try {
			String s = null;
			Process proc = Runtime.getRuntime().exec("cmd /c start cmd.exe /K \"dir && ping localhost\""); //for running window ping command
			//Process proc = Runtime.getRuntime().exec("/bin/bash -c your_command");//for mac terminal
			    
			    //BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));
				//BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
 
			/*
			 * // read the output from the command
			 * System.out.println("Here is the standard output of the command:\n"); while
			 * ((s = stdInput.readLine()) != null) { System.out.println(s); }
			 * 
			 * // read any errors from the attempted command
			 * System.out.println("Here is the standard error of the command (if any):\n");
			 * while ((s = stdError.readLine()) != null) { System.out.println(s); }
			 */
				proc.waitFor();
				System.exit(0);
		} catch (Exception e) {
			System.out.println("exception in executionThroughTreminal");
			e.printStackTrace();
		}
	}
}
